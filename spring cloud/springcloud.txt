什么是微服务？
	微服务是一种用于构建应用的架构方案。
	微服务架构有别于更为传统的单体式方案，可将应用拆分成多个核心功能。
	每个功能都被称为一项服务，可以单独构建和部署，这意味着各项服务在工作（和出现故障）时不会相互影响。



服务的发展和拆分
	SOA	ESB等系统架构
	2.商城系统和财务系统，共同使用一个数据源DB。
	
	1.商城服务，财务模块
	
	RPC财务模块通过远程调用商城服务，想要的服务都在商城的服务中，webService
	一个传统项目配合另一个传统项目，通过远程调用
	
	2.财务服务调用订单服务，商城服务调用订单服务
	面向需求维度：将原本的项目拆分成细小的服务
	面向应用维度：统一处理网络请求，同一处理图片储存的，同一处理网络爬虫，面向技术的拆分
	
注册中心：
	Eureka(Netflix)
		保证的是AP高可用
		分为服务端和客户端
		续租=心跳，客户端向服务器发起，三次没心跳后剔除
		http请求，cancel发送退出
		自我保护机制
			eureka宁愿保留健康不健康的服务，也不盲目注销任何健康服务,一致性会降低，提升了高可用性
			发送心跳包的节点小于85%就会触发保护机制
		eureka手动下线服务
			Actuator
		客户端拉去服务列表
			DiscoverClient;//springcloud提供的抽象方法
			EurekaClient;对象
调用服务：
	Feign(Netflix)
	OpenFeign
		与Feign最大的区别是在原来的基础上增加了支持SpringMVC注解
		他的本质是对RestTemplate的包装
		通过@FeignClient接口name="<服务地址>"，url="<指定调用的地址>"
	Dubbo RPC
	RestTemplate
		使用resttemplate想要可直接调用必须在注册的restTemplate当中添加@LoadBalanced注解
负载均衡：基于客户端的负载均衡
	Ribbon(Netflix)
		基于客户端的负载均衡
		客户端需要服务器的状态信息,ip,端口,服务的列表
		客户端拥有服务列表，这个列表可以从eureka上拉去，也可以在本地配置
		负载均衡策略：
			区域权重策略
			最低并发策略
			轮询策略
			可用过滤策略
			响应时间加权策略
			重试策略
		LoadBalancerClient.choose();随机获取
		通过配置文件切换负载均衡策略：(指定负载均衡策略的)
			<服务名>.ribbon.NFLoadBalancerRuleClassName = com.netflix.loadbalancer.RandomRule
服务网关：服务消费方和用户之间的负载均衡权限过滤springsecurityOAuth2.0，springSession(使用shiro基于过滤器session共享)
	LVS或者F5，作为比nginx性能更高的负载均衡器，区域机房，机房间机房直连
	zuul(Netflix)
	ngnix + lua
	gateway
	
	代理模式网关的问题，吞吐问题
	流量网关nginx：WAF
	业务网关：
	Zuul,gateway
	
	
	
链路追踪和分布式事务：
	AlibabaStea
	TCC
	springcloudSleuth链路追踪zipkin
分布式锁
	zookeeper的Curator
	RedLock
服务的保护机制
	熔断,降级Hystrix(Netflix)SpringCloudAdmin
	Sentinel
	
消息相关的(企业级的消息总线，大项目使用)
	SpringMessaging
	Camel
	SpringCloudStream
	SpringIntegration
	SpringCloudBus

服务器
	tomcat
	替代websocket的WebFlux内置服务器是Netty
	jetty
	
服务监控
	Actuator
表单校验
	validation
渲染层
	JSON，前后端分离
任务调度：定时任务
	xxl-job
数据库调用：
	springdata jpa
	springdata ES
	springdata redis
	
	
Restful风格api的接口规范
	事先定义资源
	主机名，端口号/<v1版本号>/<users资源>/<getUserList>
	get获取、delete删除、put修改
	一个资源类似对应数据库的一张表
	
	针对单表修改不在重复crud：springData Rest
	
	SPringCloud为什么用http协议，而不用dubbo的RPC
	springcloud可以跨平台
	可插拔，HTTP请求无状态，springcloud解决网络的不可靠，防止网络抖动
	
	RPC解析数据效率更高
	









































	
	
	