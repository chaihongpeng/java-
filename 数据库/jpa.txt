@Table(name="表名")表名
@Entity开启实体类

@Id主键
@GeneratedValue生成方式

@Basic默认相当于添加了这个注解，自动映射

@Column(name="列名"，length="长度"，nullable="false")精确映射

@Transient标记不需要映射的数据

@Temporal(Temporal.TIMESTAMP小时) DATE日期 指定Date类型数进行精确度


//配置外键
//声明关系
@JoinColumn(name="关联外键"),referencedColumnName = ""参照主表的主键
@OneToMany一对多
Set set = new HashSet();


//配置外键
//声明关系
@JoinColumn(name="外键列的列名")，referencedColumnName = ""当前主表主键的字段名
@ManyToOne多对一
OneObject obj;多对一对应的一对象

//配置中间表
//声明关系
@JoinTable(name="中间表名称",
			joinColumns={(name="",referencedColumnName="")},当前对象在中间表中的外键
			invereJoinColumns={(name="",referencedColumnName="")},对方对象在中间表中的外键
			)
@ManayToMany


save方法，更新或添加

查询关键字findBy


Specification动态条件查询
	root:获取需要查询的对象属性，获取属性，root。get("属性名称，非字段名称")
	query:
	criteriaBuilder:构造查询条件,内部封装了很多查询方法，使用查询方法cb对象总有很多查询方式。例：cb.equal(root.get("name"),"比较值")
	cb.and(条件1,条件2);返回此返回参即可联合查询



对象导航查询
@OneToMany(fetch=FetchType.EAGER)配置加载关系EAGER立即加载，LAZY延迟加载


实体类要在多个不同的实体类中进行,而本身又不需要独立生成一个数据库表
平铺对象属性
@Embedded加载主类上
@Embeddable

@AttributeOverrides覆盖子对象的属性
@AttributeOverride


映射枚举
@Enumerated
@MapKeyEnumerated
javax.persistence.EnumType:{
	ORDINAL:存序号
	STRING:存名称
}

自定义转化规则,@Enumerated和AttributeConverter禁止同时使用
@Convert( converter = GenderConverter.class )
@Converter
public static class GenderConverter
		implements AttributeConverter<Gender, Character> {}

读写转换器
@ColumnTransformer(
		read = "decrypt( 'AES', '00', pswd  )",
		write = "encrypt('AES', '00', ?)"
	)


@Target接口类型关联到实现类上

@Parent从@Embeddable对象中引用所有者实体

@Persister自定义实体持久化器

@Access默认访问策略,如通过get方法或直接通过field获取


@ManyToOne
@JoinColumn

@OneToMany


	document:{
		id;
		name;
		step:creatSuccess
	}
	-->文件
	document:{
		id;
		name;
		step:uploadSuccess;
		source_type:pdf,png,txt;
		source_uuid:minio;
	}
	
	-->list ::fileprocess interface[
		isSuport();
		proccess(inputStream)
	]
	
	document:{
		id;
		name;
		step:uploadSuccess;
		source_type:pdf,png,txt;
		source_uuid:minio;
		file_list:[
			{
				minio;
			}
			...
		]
		text;
	}
	
	document:{
		id;
		name;
		step:uploadSuccess;
		source_type:pdf,png,txt;
		source_uuid:minio;
		file_list:[
			{
				minio;
			}
			...
		]
		text;
		able:[
			{
				KGB_search
			}
		]
	}

	elastic:{
		KGB,NLP
	}




	document:{
		id;
		name;
		step:creatSuccess
	}
	-->文件
	document:{
		id;
		name;
		step:uploadSuccess;
		source_type:pdf,png,txt;
		source_uuid:minio;
	}
	
	-->list ::fileprocess interface[
		isSuport();
		proccess(inputStream)
	]
	
	document:{
		id;
		name;
		step:uploadSuccess;
		source_type:pdf,png,txt;
		source_uuid:minio;
		PDF_file;
		text;
	}
	
	document:{
		id;
		name;
		step:uploadSuccess;
		source_type:pdf,png,txt;
		source_uuid:minio;
		file_list:[
			{
				minio;
			}
			...
		]
		text;
		able:[
			{
				KGB_search
			}
		]
	}

	elastic:{
		KGB,NLP
	}
	


