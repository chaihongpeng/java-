熟悉GC常用算法，熟悉常见垃圾回收器，具有JVM调优经验

什么是垃圾？
	没有引用指向的对象
	
判定为垃圾的方法？
	引用计数
	Root Searching可达性分析(解决循环引用问题)
		根对象：线程栈变量、静态变量、常量池、JNI指针（调用C，C++的方法）

常见的垃圾清除算法?
	标记清除：
		优点是算法相对简单，存活对象相对比例较多时使用；
		缺点两边扫描效率偏低，容易产生碎片；
		不适合在伊甸园区使用，因为伊甸园区存活对象较少；
	拷贝：
		对象需要移动，所以需要调节对象的引用；空间浪费；
		适用于使用对象较少的情况，只执行一次效率高；
	标记压缩
		把所有的清理过程的数据进行压缩，把内存对象全部向前移动整理；
		缺点要扫描两次，需要移动对象，效率偏低；
		优点就是不会产生碎片，不会产生内存减半；
		
堆内存的逻辑分区？
	MinorGC/YGC
	MagorGC/FullGC
	
什么是栈上分配？
	小对象，
	线程私有，
	没有逃逸，只在一段代码内使用，出了代码便无人认识
	变量替换，可以用普通数据类型代替整个对象
	！！！无序调整
	
线程本地分配？TLAB
	占用eden区，默认1%；
	每个线程在伊甸园区默认自己独有的空间，优先被使用，多线程时可以减少线程争用
	！！！无需调整
	
对象什么时候进入老年代？
	超出了XX:MaxTenuringThreshold指定次数(YGC)
	默认：
		Parallel Scavenge垃圾回收器15次
		CMS 6次
		G1 15次
	动态年龄：
		s1区复制到s2区,所有对象占用已经超过50%，年龄最大的对象就会进入到老年代
		
		
		
CMS
	他是一个老年代垃圾回收器
	concurrent mark sweep
	垃圾回收线程和工作线程同时进行，并发进行
	为什么出现CMS,STW无法忍受，垃圾回收时间过长
	
	CMS的过程
	初始标记：指标及ROOT根对象，初始标记是STW
	并发标记：并发标记，会标记大部分垃圾
	重新标记：STW，并发标记过程中会产生新垃圾，此时就用重新标
	并发清理：清理过程中也会产生垃圾，这种垃圾叫做浮动垃圾，这时的垃圾只能等下垃圾回收周期
	
CMS的问题
	内存碎片化
	Mark Sweep，CMS的设计没有针对大内存系统，CMS的目的是提高响应时间
	降低吞吐量提升响应速度

新生代:堆，新生代是一个伊甸园区和两个servivor区
老年代:堆
永久代/元空间:方法区是一个逻辑概念，他的具体实现就是永久代或元空间

字符串常量 1.7-永久代 1.8-堆


常见的垃圾回收器
	Epsilon
	
Serial -- Serial Old
Parallel Scavenge -- Parallel Old
ParNew -- CMS
G1


调优预规划
	QPS TPS PPS
	
	熟悉业务场景，选定垃圾回收器
		响应时间、停顿时间
		吞吐量=用户时间/(用户时间 + GC时间)
		
	计算内存需求
	选定CPU:越高越好
	
	设定日志参数
	
案例，电商
	一天100W订单，根据日志得出订单的高峰期最高是1000订单/秒
	一个订单占用的内存，512K * 1000订单/秒
	要求相应时间在多少毫秒的情况，进行压测
	最简单的办法就是加机器
	单机10k问题
	
优化JVM运行环境
	50万PV资料网站，原服务器32位，1.5G；用户反映访问慢
	使用了64位，16G内存的堆内存；用户反映更慢了
	
	解决方案：
		很多用户浏览，很多数据Load到内存，内存不足，频繁GC，STW时间长，相应变慢
		增加内存后，内存变大，FGC时间越长
		PS垃圾回收换成PN + CMS或者G1
		
	系统CPU经常100%，如何调优？
		CPU100%,一定有线程在占用系统资源
		占用资源的线程可能分为两类：系统线程，垃圾回收线程
		1.找出哪个进程CPU高(top命令)
		2.找出该进程总的哪个线程CPU高(top -Hp)
		3.JAVA程序导出线程的堆栈(jstack)
		4.查找哪个方法(栈帧)消耗时间(jstack)
		
	系统内存飙高？
		1.堆占用高，导出堆内存
		2.分析(jhat  jvisualvm mat jprofiler)
		
	如何监控JVM?
		jstat
		

top命令 查看所有进程
top -Hp <进程号> 查看进程里的所有线程
jstack <进程号> 查看java进程中的所有线程

jstack重点关注Waiting Blocked

jinfo能查看进程的详细信息(用处也不大)

jstat -gc <进程号> <一次/多少毫秒> 打印GC的信息(信息不直观，所以用处不大)

jconsole jdk自带的查看GC图形化界面工具(用的人很少了)
jvisualvm

不能用上面的命令，图形界面去查问题

不用图形界面用cmdline arthas
图形界面是压测之前做压测


线上调优

只要能找到堆内存里哪些对象占用特别多，就可以定位调优内存溢出问题
jmap命令：
	jmap -histo <端口号>  | head <显示行数>
	jmap命令对进程影响很大，甚至卡顿，不适合大内存系统
	
arthas:


G1垃圾回收器：
	原来在物理上都是连续的物理内存
	G1借鉴了分而治之的思想
	多级上依然分代，分为四个区：
		Old区：老年代
		Survival区：存活区
		Eden区
		Humongous区：大对象区
	
	当需要垃圾回收是，g1回收器会优先回收存活 对象最少的块
	Garbage first
		
	特点：
		并发收集
		三色标记
		！！!ZGC叫做颜色指针
		压缩空间不会延长GC时间
		更容易预测GC时间
		适用于不需要特别高的吞吐量，但是需要很快的响应时间的场景

	G1的区域不在是固定的old或eden,可以动态变化
	
	card table:
		YG需要扫描整个Old区，效率非常低，老年代的对象如果指向新生代。老年代的被分为多个card，card块里有对象指向了新生代就标记为dirted。
		
		
JVM命令行参数规则：
	标砖 -开头，所有的hotSpot都支持
	非标准 -X开头，特定版本HotSpot支持特定命令
	不稳定 -XX开头，下个版本可能取消

GC常用参数：
	-XX:UseSerialGC 使用Serial New + Serial Old 垃圾回收器
	-XX:UseParNewGC 使用ParNew + SerialOld 回收器

	-Xmn:年轻代大小
	-Xms:最小堆
	-Xmx:最大堆
	-Xss:栈空间
	
	-XX:+UseTLAB
	使用TLAB，默认打开

	-XX:+PrintTLAB
	打印TLAB使用情况
	
	-XX:TLABSize
	设置TLAB大小
	！！！不需要动TLAB的参数，除非你要精确调节
	
	-XX:+DisableExplictGC
	让System.gc()不管用，FGC
	
	-XX:+PrintGC：打印GC
	-XX:+PrintGCDetails：打印详细信息
	-XX:+PrintHeapAtGC：打印堆栈的详细情况
	
	//用处不大
	-XX:+PrintGCTimeStamps
	打印发生GC的系统时间
	-XX:+PrintGCApplicationConcurrentTime
	打印应用程序时间
	-XX:+PrintGCApplicationStoppedTime
	打印暂停时间

-XX:+PrintGCDetails：打印详细信息
GC日志解读
	GC代表YGC
	FullGC代表发生了FullGC
	()代表了回收原因
	中间的[]分别代表，回收的空间大小，回收产生的时间
	最后一个[]代表用户态和内核态分别占用了多少时间
	
永久代和元空间的区别：
	元空间不需要指定空间大小
	字符串常量1.8以前放到永久代，1.8以后放到堆里
	
	


























