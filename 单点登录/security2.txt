默认我们只配置了
DelegatingFilterProxy的过滤器

		();//正真封装执行springsecurity过滤器链的方法
		获取一个FilterChainProxy对象
	
	invokeDelegating();//只是执行下一个过滤器链
	
	
	
	
	
	FilterChainProxy
		获取到
		SecurityFilterChain
			impelements
				DefaultSecurityFilterChain
				获取到filter集合，此对象存储所有的SpringSercurity的过滤器链
				


DelegatingFilterProxy是sercurity的入口函数

DefaultSecurityFilterChain封装所有过滤器集合
常用的容器
SecurityContextPersistenceFilter第一个过滤器，主要维护securityContext的容器，给后续的过滤器使用
WebAsyncManagerInterationFilter整合到spring异步执行的过滤器
HeaderWriterFilter向请求头部添加响应的信息
CsrfFilter跨域伪造请求的拦截过滤器
LogoutFilter登出过滤器
UsernamePasswordAuthenticationFilter认证操作的过滤器
DefaultLoginPageGeneratingFilter默认的登录页面
DefaultLogoutPageGeneratingFilter默认的登出页面
BasicAuthenticationFilter自动头部带有Authentication且以Basic开头的头信息
RequestCacheAwareFilter用于缓存httpServletRequest
SecurityContextHolderAwareRequestFilter对象里面维护了securityContext容器，对servletContext的封装
AnonymousAuthenticationFilter匿名登录，会创建匿名用户到Holder容器中
SessionManagementFilter限制一个用户开启多个会话的数量
ExceptionTranslationFilter处理异常的过滤器
FilterSecurityInterceptor真正授权的过滤器



GenericFilterBean继承Filter
OncePerRequestFilter集成GenericFilterBean，确保过滤器只执行一次，因为版本问题，过滤器可能会执行多次
AbstractRequestLoggingFilter继承OncePerRequestFilter


.and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);设置springsecurity对session的使用，SessionCreationPolicy.STATELESS为从不创建session，也不使用已存在的session


springsecurity认证过程：
登录请求进入到
UsernamePasswordAuthenticationFilter中处理的
	doFilter在父类的AbstractAuthenticationProcessingFilter中实现，
	首先父类只判断只接受post请求
	调用子类attemptAuthentication方法，主要目的就是接受表单数据，查数据库，*1封装到Authentication当中取
		*1首先后去前台的resquest请求中的用户名和密码，封装到UsernamePasswordAuthenticationToken当中
		setDetails就是把我们请求中的一些信息设置到UsernamePasswordAuthenticationToken当中
	authenticationManager中调用我们实现的的userDetails来做身份认证
	调用SessionAuthenticationStrategy的onAuthentication方法配置session策略
	
	
	
	认证失败后catch异常，unsuccessfulAuthentication()调用handler的onAuthenticationFailure方法
	认证成功，就调用successfulAuthentication方法
未认证
AuthenticationManager
委托
AuthenticationProvider
关联
UserDetailsService
返回
UserDetails
认证
Authentication


第二讲：
关于UsernamePasswordAuthenticationToken是什么？
UsernamePasswordAuthenticationToken中的内容
UsernamePasswordAuthenticationToken有两个构造方法，第一个未认证，第二个已认证，构造方法
setAuthenticated为true标识已经认证，设置为false表示未认证
这个UsernamePasswordAuthenticationToken实现了Authentication接口
实现这个接口的类就要有获取用户信息，用户权限，用户密码，是否被认证。这几个功能。

第三讲：
AuthenticationManager接口是做什么的？
他只规定了一个方法authenticate
他的实现类ProviderManager

这个接口方法接受了token对象

----------------------------------------------------------------------------

问题springsecurity所有的权限控制方法
hasAuthority必须有权限
hasAnyAuthority有其中一个权限即可
hasRole基于角色权限
hasAnyRole拥有其中一个角色即可

必须是spring容器中的对象
access("@ClassName.Method()")

注解权限控制，默认未开启
@EnableGlobalMethodSecurity(sercuredEnabled = true)注解开启注解调用
@Secured判断用户是否具有角色

@PreAuthorize访问方法在访问前先判断权限
@PostAuthorize操作结束后判断权限，很少用


=========================================================================================================================
FilterSecurityInterceptor授权过滤器
ExceptionTranslationFilter处理异常过滤器
UsernamePasswordAuthenticationFilter登录认证过滤器，只支持post的表单提交

DelegatingFilterProxy函数入口

==>获取到 FilterChainProxy
	===>获取所有要加载的过滤器，获得过滤链
	
	
	UserDetailsService
	
	AuthenticationEntryPoint未授权统一处理类
	
	
	
	
	
	
	









hasRole("admin");hasAnyRole();



CSRF
XSS跨站点脚本攻击































