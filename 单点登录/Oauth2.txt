在传统的 客户端--服务器 身份认证模型中
客户端请求 访问受限的资源(受保护资源) 在服务器端时要通过 授权服务器使用 使用资源所有者的 凭证
为了提供给第三方应用访问受限资源,资源所有者他的凭证给第三方。
这会造成许多问题和限制:
	o 第三方应用程序需要存储资源
      所有者的凭据以备将来使用，通常是
      明文密码。

	o 服务器需要支持密码认证，尽管
      密码存在固有的安全弱点。

	o 第三方应用程序获得了对资源
      所有者受保护资源的过于广泛的访问权限，使资源所有者没有任何权限
      限制持续时间或访问有限
      资源子集的能力。

	o 资源所有者不能在不撤销
      对所有第三方的访问权限的情况下撤销对单个第三方的访问权限，并且必须通过
      更改第三方的密码来实现。
	  
	o 任何第三方应用程序的泄露都会
      导致最终用户密码和受该
      密码保护的所有数据泄露。
	  
oauth 通过引入授权层
   并将客户端的角色与资源
   所有者的角色分开来解决这些问题
   
在oauth中,客户端访问受限资源 由资源所有者自己控制,并且 通过资源服务器的host,并且获取一组与资源所有者不同的凭证，而不是使用资源所有者的凭证访问受限资源

客户端获取一个访问令牌---一个能表示特定范围，生命周期和其他访问属性的字符串。
访问令牌由授权服务器在资源所有者的批准下颁发给第三方客户端。

客户端使用访问令牌访问由资源服务器托管的受保护资源。


角色分类
	资源所有者(resource owner):====就是当前的用户
		能够授予对受保护资源的访问权限的实体。当资源所有者是个人时，它被称为最终用户(end-user)。

	资源服务器(resource server):====就是具体提供服务的
		托管受保护资源的服务器，能够
		使用访问令牌接受和响应受保护资源请求。

	客户端(client):====就是第三方系统
		代表
		资源所有者并经其授权发出受保护资源请求的应用程序。术语“客户”确实
		不暗示任何特定的实现特征（例如，
		应用程序是否在服务器、桌面或其他

	授权服务器(authorization server):====权限认证的服务
		在成功
		验证资源所有者并获得授权后，向客户端颁发访问令牌的服务器。




















