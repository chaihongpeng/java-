如果redis只作为缓存，只需要开启RDB既可以满足需求，如果redis作为一个数据库就需要AOF

redis可以作缓存，可以做数据库
如果作为数据库就要保证数据的可靠性，不能丢失数据
如果作为缓存，数据会存在数据库，制作缓存使用RDB就可以满足需求

!!!微服务的拆分原则,有四个

redis单机问题
	单点故障
	容量有限
	连接数压力:socket压力,cpu压力

AKF:
	x：数据库的副本，主备，读写分离(全量镜像，解决读取问题)
	y：根据业务功能，将一个实例变为多个实例(就是分库)
	z：按照优先级逻辑再拆分
	
	
一变多，数据一致性问题
	所有节点阻塞，直到数据全部一致性(强一致性)
	强一致性，如果一台机器写失败，其他机器同样回滚，破坏的可用性
	可用性：为了保证服务的可用性，会允许服务器丢失数据，属于弱一致性
			为了防止数据丢失可以在中间添加kafka作为中间件，集群，响应速度快，保证数据的最终一致性
			最终一致性可能在数据更新前可能会取到不一致的数据
	分区容错:
	
主备：客户端只能访问主，备用机不参与业务
主从：客户端除了可以访问主，也可以访问从

对主做HA高可用
只要是一个程序就会有单点故障问题，所有监控程序也是一个集群
网络分区：
	外界会获取不同的状态，分区容忍性
	过半机制，为了防止脑裂。根据经验基数台最靠谱，一味三台对两台，四台对两台，四台或三台都只能挂一台
	
redis的主从复制原理
	redis使用默认的异步复制，低延迟高性能，redis使用的弱一致性
	
	
建立主从可以通过配置文件，也可以通过客户端命令和启动命令
redis集群如果从服务器挂了在重启，redis使用的是增量同步

sentinel哨兵的使用

redis分片解决流量过大问题
一个redis最多只使用几个G内存

	

	































