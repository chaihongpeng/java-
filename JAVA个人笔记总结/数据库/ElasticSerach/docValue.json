{
  "存储文件": [
    ".dvd",
    ".dvm"
  ],
  "数据的存储压缩": {
    "固定bit位": "源码中采用固定bit位个数来存放每一个域值",
    "计算公式": "利用公式 (max - min) / gcd 来计算出存储每一个域值需要的固定bit位个数。",
    "公式介绍": "其中max是最大的域值，min是最小的域值，gcd为所有域值的最大公约数。",
    "gcd": "最大公约数",
    "原理讲解": [
      "150,145,135,利用差值存储就要去max-min -> 150-135 -> 15-> bit:1111;每个数就要用4个bit位去存储",
      "150,145,135的最大公约数是5",
      "则可以用 135(min起始位): v-3*5=135(v=150), v-1*5=135(v=140), v-0*5=135(v=135) -> 3,1,0 -> bit:11,1,0;",
      "(max-min)/gcd = (150-135)/5 = 3 => bit:11 =>bit.length = 2",
      "每个数只要两个bit位去存储",
      "gcd,min将会保存到.dvm;读取阶段通过gcd,min就可以解码出域值"
    ]
  },
  "按块处理域值": {
    "概念": "在处理域值时，会分为 单个block （SingleBlock）或 多个block（MultipleBlocks）来存储域值，这么做的目的也是为了尽可能降低空间的使用。",
    "机制": [
      "当需要处理的域值个数超过 16384 (NUMERIC_BLOCK_SIZE)个时，Lucene会判断采用 多个block存储是否会减少空间的使用。"
    ]
  }
}