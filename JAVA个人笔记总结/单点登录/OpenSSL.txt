CSR
证书签名请求文件
C证书 S校验 R请求request

CRT证书

key私钥


获取key-->生成CSR-->获取到CRT

https://slproweb.com/products/Win32OpenSSL.html


生成私钥
openssl genrsa -des3 -out <xxx.key私钥的生成位置> <默认2048位，指定生成的位数>
生成的是加密算法，输入的密码是可以反推回去

生成公钥
openssl req -new -key <之前生成的key的位置> -out <yyy.csr输出位置>
生成待签名证书

openssl req -text -in <之前生成csr的位置>



=====================================================================================================
用户发送请求后-->路由器-->ISP供应商上--->电信/联通-->城市出口-->ISP供应商
$性能上SPDY对网络传输性能做了优化
网络传输过程中，中间的节点是可以随意拦截你传输的数据，并返回伪造信息
如果服务商被黑客入侵，你的请求就会在传输过程中泄密，并被伪造返回值

为了不让拦截者看懂你的消息，就需要将传输数据加密

最重要的环节是客户端把盐发给服务器

文件传输的过程使用的是对称加密算法
des des3  AES   加密过程中需要盐
加密解密使用的盐一样，https使用的就是对称加密算法

秘钥的传递是要使用非对称加密，秘钥有两个
公钥，私钥
公钥进行加密，只有私钥才可以解开得到明文
私钥对明文加密，同样也可以使用公钥进行解密

先有私钥，根据私钥进行加密得到公钥，私钥只是一段特别长的字符串

私钥只有一个，存在服务器端



服务器的私钥生成服务器的公钥，此时其他人都没有数据
服务器要把公钥发给服务器
但是数据传输可以被窃取，黑客窃取了公钥，并把公钥返回给客户端
浏览器通过已经泄露的加密出数据发给服务器
黑客继续获取到公钥加密的数据，但是看不到数据里的内容，只能把请求转给服务器端
	如果黑客通过公钥伪造一份假请求
	服务器返回数据给拦截者，公钥可以解开，但是无论黑客怎么做，都无法伪造客户端通过公钥可以解开的有效数据
	
	但是黑客可以伪造一对公私钥，截取真正的公钥把假公钥发给客户端，理论上黑客作为中间商就这样破解了用户的信息
	
	结论：只靠非对称加密也是不行的，因为浏览器无法判断公钥是不是真的由服务器下发的，还是被拦截的替换
	
第三套算法，hash摘要算法
	数字签名，有效数据通过摘要算法生成 签名
	摘要就是签名
	(hash私钥，数据)-->签名
	
	算法是固定的，每次发送传递的是数据和签名
	
	












