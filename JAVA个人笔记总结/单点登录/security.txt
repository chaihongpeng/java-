继承WebSecurityConfigerAdapter抽象类

重写configure配置HttpSecurity的状态
		httpSecurity.
			.formLogin()//开启表单登录模式
				.loginPage("/login")//请求被拦截后默认访问的路径
				.loginProcessingUrl("/login")//表单提交后的认证地址,认证处理器的地址,处理器本身由SpringSecurity提供
				.usernameParameter("userName")//默认表单的用户名
				.passwordParameter("password")//默认的表单的密码
				.successHandler()//执行自定义handler
				.failureHandler()//执行自定义handler
				.and()//使用and连接
			.authorizeRequests()//配置权限
				.antMatchers("/login","/login.html")//进行地址匹配
				.permitAll()//所有的用户都可以任意访问，但是不跳过过滤器链
				.antMatchers("/order")//进行地址匹配
				.hasAnyAuthority("admin","user")//只有拥有admin角色或user角色的用户才可以访问的路径
				.anyRequest()//除上面以外，剩余的全部请求
				.authenticated()//执行改请求时，必须已经登录应用
				.and()
			.csrf().disable();禁用跨站攻击防御，否则无法登陆成功
			
		httpSecurity
			.logout()
				.logoutUrl("/logout")//等处请求路径


				

@EnableWebSecurity注解，用于配置security
继承WebSecurityConfigurerAdapter修改配置类
//用户认证的数据源，相当于Realm
public void configure(AythenticationManagerBuilder auth){
	auth.inMemoryAuthentication()//使用内存添加数据
		.withUser("user")//账户
		.password("{noop}1234")//密码,noop代表这是一份未加密数据
		.roles("USER")//角色
}
//配置SpringSecurity相关信息
configure(HttpSecurity http){
	http..authorizeRequests()//配置权限
		.antMatchers(/**).hasAnyRole("USER","ADMIN")//设置可以访问的角色
		.anyRequest().authenticated()//其他资源必须认证才能访问
}

@EnableGlobalMethodSecurity(prePostEnabled = true)
可在类上或者方法上添加@Securd("ADMIN")给接口添加用户角色限制



UserBean要实现UserDetails接口
isEnabled当前用户是否可用....判断用户状态

UserService要实现UserDetailsService接口
实现loadUserByUserName的方法
在方法内查询数据库
返回UserDetails对象


@ControllerAdvice
在类上可以对页面的一场进行处理
@ExceptionHandler(Exception.class)
定义所要拦截并处理的异常
AccessDeniedException


vue的sso
路由切换，第一次登录去找login页，全局拦截，存在cookie里
每一个请求都携带什么，
登录页面也要判断，成功存cookie。

Vue动态菜单

shiro想要扩展的东西



spring security也有自己的像ioc容器 SecurityContextHolder容器，认证通过的操作对象



DefaultLoginPageGeneratingFilter 生成默认登录认证页面

DefaultLogoutPageGeneratingFilter 生成默认推出的认证页面

BasicAuthenticationFilter 自动解析http头部Authentication,且以Basic开头的头信息



AbstractAuthenticationProcessingFilter successfulAuthentication认证成功之后的相关做法

校验过滤器
BasicAuthenticationFilter doFilterInternal方法来验证是否登录




Oauth2 用户操作A用户操作B，这是单点登录
用户操作A，A操作B这是Oauth2

四种授权方式
	授权码模式，A系统问用户是否可以操作B系统，注意：用户是有B的操作权限的，由用户给A授权
	
	简化模式：直接将访问B的同行令牌暴露在浏览器，省去门票的过程，B直接把令牌给A，A拿令牌去操作B
	

SpringSecurity认证器
-->>>
UsernamePasswordAuthenticationFilter认证过滤器
判断必须为post请求
从request中获取username,password
认证前封装到这个对象里
将用户名和密码封装到UsernamePasswordAuthenticationToken(principal,credentials)用户名，密码

进行真正的认证逻辑，进入到这个方法当中去
UsernamePasswordAuthenticationFilter.getAuthenticationManager().authenticate(authRequest);

循环遍历认证方式集合List<AuthenticationProvider> providers，判断出适合的登录方式，如第三方登录

默认会进入AbstractUserDetailsAuthenticationProvider认证器，authenticate

认证器子类DaoAuthenticationProvider，retrieveUser真正认证操作

this.getUserDetailsService().loadUserByUsername(username);返回内部的用户对象

UserDetailsService,loadUserByUsername()也是一个需要实现的接口,这个UserDetailsService就是用户自己实现的service接口

SpringSecurity过滤器
-->>>
springSecurityFilterChain这一个过滤器中执行了所有的spring过滤器



UserDetailsService登录逻辑

PasswordEncoder密码解析器
	BCryptPasswordEncoder,推荐使用的实现类
	
	encode 加密方法
	matches密码匹配
	
	
自定义登录逻辑的时候，容器必须要有PasswordEncoder的实例
在向容器中注入UserDetailsServcie实例


自定义登录成功处理器（前后端分离版）
AuthenticationSuccessHandler
	onAuthenticationSuccess(request,Authentication authentication);
	实现该接口方法，在方法中拿到request想前端发送json,authentication里面存放了登录信息
配置类.successHandler(new AuthenticationSuccessHandler()的接口实现类)

自定义登录失败处理器(前后端分离版)
AuthenticationFailureHandler
	onAuthenticationFailure(request,AuthenticationException authentication);

自定义访问控制
	http.access("@类.方法(参数，参数)")
	方法返回true则有权限访问，返回false则无权限访问
	
	
	
@EnableGlobalMethodSecurity注解作用开启注解权限配置。每个注解都有自己开启权限的值
一般卸载controller层上
@Securd判断用户是否具有角色，ROLE_开头+角色名
这个注解会先判断登录，登录后还是没有权限则会传回报错

支持表达式access表达式
@PreAuthorize操作执行前判断权限
@PostAuthorize操作执行后判断权限(很少用)



Basic Auth每次请求都带上用户名和密码
session状态管理






springSecurity有授权范围










